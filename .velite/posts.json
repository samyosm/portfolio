[
  {
    "title": "ðŸš€A Step-by-Step Guide to build a secure Rails app: Sign Up, Log In, and Log Out",
    "slug": "another-one",
    "date": "2000-02-25T18:22:00.000Z",
    "metadata": {
      "readingTime": 1,
      "wordCount": 157
    },
    "excerpt": "Introduction\nProviding the security of web applications is paramount, and one of the binding\naspects of it is authentication. It fosters the safe and secure sign-up, login,\nand logout of users. In this article, we'll dive deeper into the implementation\nof auth",
    "content": "<h1>Introduction</h1>\n<p>Providing the security of web applications is paramount, and one of the binding\naspects of it is authentication. It fosters the safe and secure sign-up, login,\nand logout of users. In this article, we'll dive deeper into the implementation\nof authentication in a Rails app, utilizing the built-in features and popular\ngems that are available. From configuring authentication to managing user\nsessions, this article will cover everything you need to know to make your\napplication secure and reliable.</p>\n<p>We will begin by starting up a simple Rails application</p>\n<p>In our web service, we can fill the prompt and generate image with one of the\ntext-to-image worker AI model randomly.</p>\n<p>And our techniques are as follows:</p>\n<p>Front-end: The index.html is the main page to let users input their prompts and\nsee generated image. Back-end: The extract.php is the main PHP program to handle\nuser prompt and respond generated image.</p>",
    "tags": [
      "linux"
    ],
    "permalink": "/blog/another-one"
  },
  {
    "title": "How Telemetry Saved my Open-Source Platform",
    "slug": "how-telemetry-saved-my-open-source-platform",
    "date": "1992-02-25T18:22:00.000Z",
    "metadata": {
      "readingTime": 1,
      "wordCount": 135
    },
    "excerpt": "What started as a frustration with not being able to get in touch with our\nusers, quickly developed into a redesign of the flow of our platform.\nMy team and I are developing an open-source platform that helps developers\ndeploy and manage their applications in ",
    "content": "<p>What started as a frustration with not being able to get in touch with our\nusers, quickly developed into a redesign of the flow of our platform.</p>\n<p>My team and I are developing an open-source platform that helps developers\ndeploy and manage their applications in Kubernetes. We have been working hard to\nexpand our user base, and the efforts were starting to show results.</p>\n<p>The rising number of installations was satisfying to see. However, that was the\nonly thing we were able to observe. We wanted to know more. We wanted to know\nwhat users are doing with our platform and what they are struggling with.</p>\n<p>The following short story could be considered a #building-in-public entry of our\nstartup, but I just found it interesting and wanted to share it with you.</p>",
    "tags": [
      "opensource",
      "programming"
    ],
    "permalink": "/blog/how-telemetry-saved-my-open-source-platform"
  },
  {
    "title": "Web Extract Worker, a service with text-to-image worker AI models!",
    "slug": "web-extract",
    "date": "1994-02-25T18:22:00.000Z",
    "metadata": {
      "readingTime": 1,
      "wordCount": 66
    },
    "excerpt": "In our web service, we can fill the prompt and generate image with one of the\ntext-to-image worker AI model randomly.\nAnd our techniques are as follows:\nFront-end: The index.html is the main page to let users input their prompts and\nsee generated image. Back-e",
    "content": "<p>In our web service, we can fill the prompt and generate image with one of the\ntext-to-image worker AI model randomly.</p>\n<p>And our techniques are as follows:</p>\n<p>Front-end: The index.html is the main page to let users input their prompts and\nsee generated image. Back-end: The extract.php is the main PHP program to handle\nuser prompt and respond generated image.</p>",
    "tags": [
      "opensource",
      "linux"
    ],
    "permalink": "/blog/web-extract"
  }
]